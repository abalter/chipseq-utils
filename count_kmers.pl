use strict;
use warnings;
use File::Basename; # For fileparse

sub say {print @_, "\n"}; # To mimic perl 6 `say` function (adds newline)

my $infile = $ARGV[0]; # path to fastq file to analyze
my $outdir = $ARGV[1]; # directory to save output. filename autogenerated
my $kmer_length = $ARGV[2]; # kmer_length (# bp)

say "fullname: $infile";
say "outdir: $outdir";

(my $file, my $dir, my $ext) = fileparse($infile, qr/\.[^.]*/);

my %kmer_counts=(); # kmer hash
#my $kmer_length=6; # kmer length
my $readlen=100; # read length
my $n=0; # line counter will go from 0-3
my $kmer = ""; # found kmers

open(my $fileobj, '<', $infile) or die "Could not open file '$infile' $!";

while (my $sequence = <$fileobj>)
{

    #dsay "n=$n";

    if ($n%4 == 1) # the sequences are on the 2nd line of each group in a fastq
    {
        for(my $o=0 ; $o<($readlen-$kmer_length) ; $o++ ) # scan through sequence
        {
            $kmer=substr($sequence, $o, $kmer_length);
            $kmer_counts{$kmer}++;
        }
    }
   
    $n++;
}

close $fileobj;

my $outfilename = "$outdir/${file}_kmer_counts.tsv";
say "outfilename: $outfilename";

open(my $outfile, '>', $outfilename) or die "Could not open file '$outfilename' $!";

# loop over kmer_counts hash and write counts to file
while ( my ($key, $val) = each %kmer_counts )
{
    #say "$key ==> $val";   
    print $outfile "$key","\t","$val","\n"
}

close $outfile;

